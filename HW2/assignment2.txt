1. Proof that the largest number for radix-r can be represented with N digits is r^N-1
First, let's show this is true for radix-2 with 2 digits which we know is 11, or 3 in decimal. 2^2 - 1 = 4 - 1 = 3.
Now we can prove through induction that for any radix-r with N digits this formula holds for all n
r^n-1 = the summation from i = 0 to n di*2^i

2. As an example, in base 10, the largest digit is 10-1 and adding the largest possible digits 9+9 = 18 which is < 10 * 2
(making the carry 2) and adding the two smallest possible digits 0+0 = 0 the carry bit must be 0<=c<2. So for base r, the
largest digits added (r-1)+(r-1) simplifies to 2r-2 < 2r and adding the two smallest digits 0+0 = 0 so the carry bit must be
0<=c<2 for all base r.

3. Proof that 'sign-extension is value preserving. (dn-1 dn-2 ... d0)2 = (dn-1 dn-1 dn-2 ... d0)2
First, let's show this is true for the two bit two's complement binary number 10. If we want to sign extend this to a three bit
we can duplicate the sign bit, or most significant bit which yields 110. Then, converting both of these numbers from two's
complement by flipping the bits and adding one, both result in 10.
Now we can prove through induction that for k+1.
the expression (dn-1 dn-1 dn-2 ... d0) can expand to -dn-1*2^n + summation from i=0 to n-1 di*2^i
which equates to -dn-1*2^n + dn-1*2^n-1 + summation from i=0 to n-2 di*2^i
which equates to -dn-1(2^n - 2^n-1) + summation from i=0 to n-2 di*2^i
which equates to -dn-1*2^n-1 + summation from i=0 to n-2 di*2^i
which equals (dn-1 dn-2 ... d0)

4. As an example, if we perform a single left shift operation on 10 (2 in decimal) the result is 100 (4 in decimal)
So for any binary number r, a left shift operation is equivalent to multiplying by two since the shift operation appends a zero
to the right making each bit count 2 times more. Similarly, the opposite; a right shift operation is equivalent to dividing by
two since the shift operation removes the least significant bit making each bit count b times less.

8. V((ci+1,Si)x) = V((ai)2) + V((bi)2) + V((ci)2). Now, since carry bits can only be a 1 or 0 the carry out can only be one digit.
So V((Cn, Sn-1 ... S0)2 = V((an-1, ... a0)2) + V((bn-1, ... b0)2) + V(C0)2 Therefore adding up cn-1 ...c0 an-1 ... a0 bn-1 ... b0
equates to Cn Sn-1 Sn-2 ... S0
